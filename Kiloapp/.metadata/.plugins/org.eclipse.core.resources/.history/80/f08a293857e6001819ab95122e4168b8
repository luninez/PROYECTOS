package com.salesianostriana.dam.kiloapp.controller;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.annotation.JsonView;
import com.salesianostriana.dam.kiloapp.formbean.RegisterFormBean;
import com.salesianostriana.dam.kiloapp.model.Authority;
import com.salesianostriana.dam.kiloapp.model.AuthorityName;
import com.salesianostriana.dam.kiloapp.model.User;
import com.salesianostriana.dam.kiloapp.repository.AuthorityRepository;
import com.salesianostriana.dam.kiloapp.security.JwtAuthenticationRequest;
import com.salesianostriana.dam.kiloapp.security.JwtTokenUtil;
import com.salesianostriana.dam.kiloapp.security.JwtUser;
import com.salesianostriana.dam.kiloapp.services.JwtAuthenticationResponse;
import com.salesianostriana.dam.kiloapp.services.UsuarioService;
import com.salesianostriana.dam.kiloapp.views.View;
@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
public class AuthenticationRestController {

	@Value("${jwt.header}")
	private String tokenHeader;

	@Autowired
	private AuthenticationManager authenticationManager;

	@Autowired
	private JwtTokenUtil jwtTokenUtil;

	@Autowired
	UsuarioService userService;

	@Autowired
	PasswordEncoder passwordEncoder;

	@Autowired
	AuthorityRepository authorityRepository;

	@Autowired
	@Qualifier("jwtUserDetailsService")
	private UserDetailsService userDetailsService;

	@SuppressWarnings("unlikely-arg-type")
	public String buscarRol(List<Authority> authorities) {
		boolean encontrado = false;
		int i = 0;
		while (!encontrado && i < authorities.size()) {
			if (authorities.get(i).equals(AuthorityName.ROLE_ADMIN)) {
				encontrado = true;
			} else {
				i++;
			}
		}
		if (encontrado) {
			return "ADMIN";
		} else {
			return "USER";
		}
	}

	
	@PostMapping("${jwt.route.authentication.path.login}")
	public ResponseEntity<?> createAuthenticationToken(@RequestBody JwtAuthenticationRequest authenticationRequest)
			throws AuthenticationException {

		authenticate(authenticationRequest.getUsername(), authenticationRequest.getPassword());

		// Reload password post-security so we can generate the token
		final UserDetails userDetails = userDetailsService.loadUserByUsername(authenticationRequest.getUsername());
		final String token = jwtTokenUtil.generateToken(userDetails);

		User e = userService.findByUsername(authenticationRequest.getUsername());

		String rol = buscarRol(e.getAuthorities());

		// Return the token
		return ResponseEntity.ok(new JwtAuthenticationResponse(token, e.getUsername(), e.getEmail(), rol));
	}


	//@JsonView(View.Summary.class)
	@PostMapping("${jwt.route.authentication.signup}")
	public ResponseEntity<?> register(@RequestBody RegisterFormBean r) {
		System.out.println(r);
		User u = new User();
		u.setUsername(r.getUsername());
		String password = passwordEncoder.encode(r.getPassword());
		u.setPassword(password);
		u.setFirstname(r.getFirstname());
		List<Authority> listaAuth = new ArrayList<>();
		listaAuth.add(authorityRepository.findByIdNoOptional(1003));
		u.setEmail(r.getEmail());
		u.setAuthorities(listaAuth);

		
		u.setClase(r.getClase());

		u.setEnabled(true);
		LocalDateTime fecha = LocalDateTime.now();
		Date date = Date.from(fecha.atZone(ZoneId.systemDefault()).toInstant());
		u.setLastPasswordResetDate(date);

		System.out.println(u.getPassword());
		User e = userService.save(u);
		final UserDetails userDetails = userDetailsService.loadUserByUsername(r.getUsername());
		final String token = jwtTokenUtil.generateToken(userDetails);
		String rol = buscarRol(e.getAuthorities());
		JwtAuthenticationResponse j = new JwtAuthenticationResponse(token, e.getUsername(), e.getEmail(), rol);
		return ResponseEntity.status(HttpStatus.CREATED).body(j);
	}

	
	@RequestMapping(value = "${jwt.route.authentication.refresh}", method = RequestMethod.GET)
	public ResponseEntity<?> refreshAndGetAuthenticationToken(HttpServletRequest request) {
		String authToken = request.getHeader(tokenHeader);
		final String token = authToken.substring(7);
		String username = jwtTokenUtil.getUsernameFromToken(token);
		JwtUser user = (JwtUser) userDetailsService.loadUserByUsername(username);

		String refreshedToken = jwtTokenUtil.refreshToken(token);
		return ResponseEntity.ok(new JwtAuthenticationResponse(refreshedToken));

	}

	@ExceptionHandler({ AuthenticationException.class })
	public ResponseEntity<String> handleAuthenticationException(AuthenticationException e) {
		return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(e.getMessage());
	}

	/**
	 * Authenticates the user. If something is wrong, an
	 * {@link AuthenticationException} will be thrown
	 */
	private void authenticate(String username, String password) {
		Objects.requireNonNull(username);
		Objects.requireNonNull(password);

		try {
			authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));
		} catch (DisabledException e) {
			throw new AuthenticationException("User is disabled!", e);
		} catch (BadCredentialsException e) {
			throw new AuthenticationException("Bad credentials!", e);
		}
	}
}
